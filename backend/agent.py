import os
import pandas as pd
from dotenv import dotenv_values
from langchain_openai import ChatOpenAI
from langchain.text_splitter import RecursiveCharacterTextSplitter, CharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain.chains.question_answering import load_qa_chain
from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain_core.prompts import PromptTemplate


class ReviewAnalysis:
    def __init__(self):
        """
        Initializes the ReviewAnalysis class..
        """
        # Initialize the language model
        config = dotenv_values(".env")
        apikey = config['OPENAI_API_KEY']

        os.environ["TOKENIZERS_PARALLELISM"] = "false"

        # Initialize LLM and QA chain
        self.llm = ChatOpenAI(temperature=0.7, openai_api_key=apikey)
        self.chain = load_qa_chain(self.llm, chain_type="stuff")

        # Load CSV data and convert it to text

        self.text_content = self.csv_to_text()

        # Set up text splitter
        self.text_splitter = CharacterTextSplitter(
            separator="\n\n",
            chunk_size=2000,
            chunk_overlap=200,
            length_function=len,
            is_separator_regex=False,
        )
        self.docs = self.text_splitter.split_text(self.text_content)

        # Set up embeddings and vectorstore
        self.embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
        self.vectorstore = FAISS.from_texts(self.docs, self.embeddings)
        self.retriever = self.vectorstore.as_retriever(search_type="mmr", search_kwargs={"k": 6})

        # Set up custom RAG prompt
        self.custom_rag_prompt = PromptTemplate.from_template(
            """Eres un agente especilizado en dar información detallada sobre las
            opiniones de los usuarios, para analizar y mejorar la experiencia.
            Si no sabes la respuesta, di simplemente que no la sabes,
            no intentes inventarte una respuesta. Si conoces la fecha, mencionala
            Utiliza tres frases como máximo y procura que la respuesta sea 
            lo más concreta posible.

            {context}

            Question: {question}

            Respuestas útiles:"""
        )

        # Create RAG chain
        self.rag_chain = (
            {"context": self.retriever | self.format_docs, "question": RunnablePassthrough()}
            | self.custom_rag_prompt
            | self.llm
            | StrOutputParser()
        )

    def csv_to_text(self):
        """
        Transforms the CSV into a plain text.

        Returns:
            str: Transformed text from the CSV file.
        """
        text = ''
        df = pd.read_csv('data.csv', sep=',')
        new_df = df[['comment', 'date']].copy()
        df_dict = new_df.to_dict(orient='records')
        for row in df_dict:
            text += row['comment'] + ' fecha del comentario ' + row['date'] + '\n\n'
        return text

    def format_docs(self, docs):
        """
        Format the documents for output.

        Args:
            docs: Documents to format.

        Returns:
            str: Formatted documents as a string.
        """
        return "\n\n".join(doc.page_content for doc in docs)

    def get_answer(self, question: str):
        """
        Get the answer to a question using the RAG chain.

        Args:
            question (str): The question to ask.

        Returns:
            str: The answer generated by the model.
        """
        return self.rag_chain.invoke({"question": question})



